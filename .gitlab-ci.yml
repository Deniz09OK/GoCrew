image: node:20

stages:
  - install_backend
  - install_frontend
  - build_backend
  - build_frontend
  - test_e2e
  - docker_backend
  - docker_frontend
  - docker-compose-up


before_script:
  - echo "DATABASE_URL=$DATABASE_URL" >> .env
  - echo "JWT_SECRET=$JWT_SECRET" >> .env
  - if [ -n "$PORT_BACKEND" ]; then echo "PORT_BACKEND=$PORT_BACKEND" >> .env; fi
  - if [ -n "$PORT_FRONTEND" ]; then echo "PORT_FRONTEND=$PORT_FRONTEND" >> .env; fi
  - echo ".env reconstruit :"
  - cat .env

install_backend:
  stage: install_backend
  script:
    - cd Gocrew_backend/
    - npm install

install_frontend:
  stage: install_frontend
  script:
    - cd Gocrew_frontend
    - npm install
  artifacts:
    paths:
      - Gocrew_frontend/node_modules
      - Gocrew_frontend/package-lock.json
      - Gocrew_frontend/package.json

build_backend:
  stage: build_backend
  script:
    - cd Gocrew_backend/
    - npm run build

build_frontend:
  stage: build_frontend
  dependencies:
    - install_frontend
  script:
    - cd Gocrew_frontend
    - npm run build

test_e2e:
  stage: test_e2e
  image: mcr.microsoft.com/playwright:v1.55.0-jammy
  services:
    - name: postgres:13
      alias: postgres
  variables:
    POSTGRES_DB: gocrew
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: admin
    DATABASE_URL: "postgresql://postgres:admin@postgres:5432/gocrew"
    CI: "true"
  before_script:
    # Installer les d√©pendances syst√®me
    - apt-get update && apt-get install -y curl netcat-traditional
    # Installer les d√©pendances Node.js du projet racine
    - npm install
    # Installer Playwright
    - npx playwright install chromium
    # D√©marrer le backend en arri√®re-plan
    - cd Gocrew_backend
    - npm install
    - nohup npm start > backend.log 2>&1 &
    - sleep 5
    - cd ..
    # D√©marrer le frontend en arri√®re-plan
    - cd Gocrew_frontend  
    - npm install
    - nohup npm run dev -- --host 0.0.0.0 > frontend.log 2>&1 &
    - sleep 15
    - cd ..
    # V√©rifier que les ports sont ouverts
    - echo "V√©rification des ports..."
    - nc -z localhost 3000 && echo "‚úÖ Backend port 3000 OK" || echo "‚ùå Backend port 3000 KO"
    - nc -z localhost 5173 && echo "‚úÖ Frontend port 5173 OK" || echo "‚ùå Frontend port 5173 KO"
  script:
    - echo "üß™ Lancement des tests E2E avec Playwright"
    - npm run test:ci
  after_script:
    - echo "üìã Logs du backend:"
    - cat Gocrew_backend/backend.log || true
    - echo "üìã Logs du frontend:"  
    - cat Gocrew_frontend/frontend.log || true
    - pkill -f "npm start" || true
    - pkill -f "npm run dev" || true
    - kill $FRONTEND_PID || true
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    expire_in: 30 days
  allow_failure: true

docker-build-backend:
  stage: docker_backend
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker info
    - docker build -f Gocrew_backend/Dockerfile -t $CI_REGISTRY_IMAGE-backend:latest .
    - echo "Image Docker backend build√©e"

docker-build-frontend:
  stage: docker_frontend
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker info
    - docker build -f Gocrew_frontend/Dockerfile -t $CI_REGISTRY_IMAGE-frontend:latest ./Gocrew_frontend
    - echo "Image Docker frontend build√©e"

docker-compose-up:
  stage: docker-compose-up
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker compose up -d
    - sleep 10
    - docker compose ps
    - docker compose down
  needs:
    - docker-build-backend
    - docker-build-frontend